{"ast":null,"code":"const initialState = {\n  notifications: []\n};\nexport const loadNotif = payload => {\n  return {\n    type: \"LOAD_NOTIFICATIONS\",\n    payload\n  };\n};\nexport const setNotifRead = payload => {\n  return {\n    type: \"SET_NOTIFICATION_READ\",\n    payload\n  };\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case 'LOAD_NOTIFICATIONS':\n      {\n        const payload = action.payload;\n        return {\n          notifications: payload\n        };\n      }\n\n    case 'SET_NOTIFICATION_READ':\n      {\n        const payload = action.payload;\n        let updatedState = state.notifications.filter(el => {\n          if (el.id === payload) {\n            return el.is_read = false;\n          }\n        });\n        console.log(updatedState);\n        return state;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/home/fabricio7p/Documents/Projects/Ikebana/front/src/store/ducks/notifications.js"],"names":["initialState","notifications","loadNotif","payload","type","setNotifRead","state","action","updatedState","filter","el","id","is_read","console","log"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,aAAa,EAAE;AADE,CAArB;AAIA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa;AAClC,SAAO;AACHC,IAAAA,IAAI,EAAE,oBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAIF,OAAD,IAAa;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAE,uBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,gBAAe,CAACG,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC7C,UAAOA,MAAM,CAACH,IAAd;AACI,SAAK,oBAAL;AAA2B;AACvB,cAAMD,OAAO,GAAGI,MAAM,CAACJ,OAAvB;AACA,eAAO;AACHF,UAAAA,aAAa,EAAEE;AADZ,SAAP;AAGH;;AACD,SAAK,uBAAL;AAA8B;AAC1B,cAAMA,OAAO,GAAGI,MAAM,CAACJ,OAAvB;AACA,YAAIK,YAAY,GAAGF,KAAK,CAACL,aAAN,CAAoBQ,MAApB,CAA4BC,EAAD,IAAQ;AAClD,cAAIA,EAAE,CAACC,EAAH,KAAUR,OAAd,EAAuB;AACnB,mBAAOO,EAAE,CAACE,OAAH,GAAa,KAApB;AACH;AACJ,SAJkB,CAAnB;AAKAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACA,eAAOF,KAAP;AACH;;AACD;AAAS;AACL,eAAOA,KAAP;AACH;AAnBL;AAqBH,CAtBD","sourcesContent":["const initialState = {\n    notifications: [],\n}\n\nexport const loadNotif = (payload) => {\n    return {\n        type: \"LOAD_NOTIFICATIONS\",\n        payload\n    }\n}\n\nexport const setNotifRead = (payload) => {\n    return {\n        type: \"SET_NOTIFICATION_READ\",\n        payload\n    }\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case 'LOAD_NOTIFICATIONS': {\n            const payload = action.payload\n            return {\n                notifications: payload\n            }\n        }\n        case 'SET_NOTIFICATION_READ': {\n            const payload = action.payload\n            let updatedState = state.notifications.filter((el) => {\n                if (el.id === payload) {\n                    return el.is_read = false\n                }\n            })\n            console.log(updatedState)\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}