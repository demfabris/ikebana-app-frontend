{"ast":null,"code":"var initialState={notifications:[]};export var loadNotif=function loadNotif(payload){return{type:\"LOAD_NOTIFICATIONS\",payload:payload};};export var setNotifRead=function setNotifRead(payload){return{type:\"SET_NOTIFICATION_READ\",payload:payload};};export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'LOAD_NOTIFICATIONS':{var payload=action.payload;return{notifications:payload};}case'SET_NOTIFICATION_READ':{var _payload=action.payload;var updatedState=state.notifications.map(function(el){if(el.id===_payload){el.is_read=true;return el;}else{return el;}});return{notifications:updatedState};}default:{return state;}}});","map":{"version":3,"sources":["/home/fabricio7p/Documents/Projects/Ikebana_production/reactapp/src/store/ducks/notifications.js"],"names":["initialState","notifications","loadNotif","payload","type","setNotifRead","state","action","updatedState","map","el","id","is_read"],"mappings":"AAAA,GAAMA,CAAAA,YAAY,CAAG,CACjBC,aAAa,CAAE,EADE,CAArB,CAIA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,CAAa,CAClC,MAAO,CACHC,IAAI,CAAE,oBADH,CAEHD,OAAO,CAAPA,OAFG,CAAP,CAIH,CALM,CAOP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACF,OAAD,CAAa,CACrC,MAAO,CACHC,IAAI,CAAE,uBADH,CAEHD,OAAO,CAAPA,OAFG,CAAP,CAIH,CALM,CAOP,eAAe,UAAkC,IAAjCG,CAAAA,KAAiC,2DAAzBN,YAAyB,IAAXO,CAAAA,MAAW,2CAC7C,OAAOA,MAAM,CAACH,IAAd,EACI,IAAK,oBAAL,CAA2B,CACvB,GAAMD,CAAAA,OAAO,CAAGI,MAAM,CAACJ,OAAvB,CACA,MAAO,CACHF,aAAa,CAAEE,OADZ,CAAP,CAGH,CACD,IAAK,uBAAL,CAA8B,CAC1B,GAAMA,CAAAA,QAAO,CAAGI,MAAM,CAACJ,OAAvB,CACA,GAAMK,CAAAA,YAAY,CAAGF,KAAK,CAACL,aAAN,CAAoBQ,GAApB,CAAwB,SAACC,EAAD,CAAQ,CACjD,GAAIA,EAAE,CAACC,EAAH,GAAUR,QAAd,CAAuB,CACnBO,EAAE,CAACE,OAAH,CAAa,IAAb,CACA,MAAOF,CAAAA,EAAP,CACH,CAHD,IAGO,CACH,MAAOA,CAAAA,EAAP,CACH,CACJ,CAPoB,CAArB,CAQA,MAAO,CACHT,aAAa,CAAEO,YADZ,CAAP,CAGH,CACD,QAAS,CACL,MAAOF,CAAAA,KAAP,CACH,CAvBL,CAyBH,CA1BD","sourcesContent":["const initialState = {\n    notifications: [],\n}\n\nexport const loadNotif = (payload) => {\n    return {\n        type: \"LOAD_NOTIFICATIONS\",\n        payload\n    }\n}\n\nexport const setNotifRead = (payload) => {\n    return {\n        type: \"SET_NOTIFICATION_READ\",\n        payload\n    }\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case 'LOAD_NOTIFICATIONS': {\n            const payload = action.payload\n            return {\n                notifications: payload\n            }\n        }\n        case 'SET_NOTIFICATION_READ': {\n            const payload = action.payload\n            const updatedState = state.notifications.map((el) => {\n                if (el.id === payload) {\n                    el.is_read = true;\n                    return el\n                } else {\n                    return el\n                }\n            })\n            return {\n                notifications: updatedState\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}